"use strict";(self.webpackChunkstardust_website=self.webpackChunkstardust_website||[]).push([[117],{8208:function(t,e,a){a.r(e),a.d(e,{contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return h}});var o=a(7462),n=a(3366),i=(a(7294),a(3905)),r=["components"],s={title:"About"},u=void 0,l={type:"mdx",permalink:"/about",source:"@site/src/pages/about.md"},h=[],c={toc:h};function d(t){var e=t.components,a=(0,n.Z)(t,r);return(0,i.kt)("wrapper",(0,o.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",null,"Stardust from Nova's perspective"),(0,i.kt)("p",null,"Well, I didn't invent the idea of a display server, but yeah, Stardust is my creation. I originally had the idea in 2012, but of course, it was a lot different back then. I basically just wanted a way to use my computer in 3D space. At first, I had the derpy idea of creating a virtual touchscreen, but those generally don't work well. While there are exceptions, such as putting the virtual touchscreen on an actual surface, most mid-air virtual touchscreens don't work because you have no haptics to fall back on. So, I just wanted to use my computer in 3D. Eventually, I realized that just having regular old 2D panels or something like that wasn't useful enough. I then thought, why don't I just add different interface elements and snap them straight to the side? For instance, I could snap a scroll bar to the side of my web browser, and that piece of interface wouldn't have to change; it's just not useful enough, and it gets complicated over time. Interacting with your computer that way in 3D isn't necessarily the best, and it requires you to use hand-tracking, which some people don't like, and it won't work for every case."),(0,i.kt)("p",null,"I spent a few years thinking about how to account for every way somebody would want to use their computer in 3D space. I was thinking of XR, something like an all-day AR or MR headset. Eventually, I decided that in traditional computing, the system UI defines how you interact with your entire OS, and it's not very flexible. You'll notice on an Android phone or an iPhone that you can't change the interface elements almost at all. Even on a Windows computer, there are very limited customizations that Microsoft has removed. You can't even move the taskbar on top anymore, right? But in XR, that just doesn't work because the moment you try to restrict what the user can do, there are always uncomfortable scenarios. For example, say you're on an airplane with a super cramped table, and you don't have any room to stretch out, so you have this virtual touchscreen that you're now having to bend your elbow to try and poke, and it's a very uncomfortable situation. "),(0,i.kt)("p",null," I realized that it's not possible for a team of people, no matter how big, to account for even most of the scenarios that you're going to end up in. I was stumped. I looked at another video for another system UI for Linux and thought, what if instead of this traditional method where you launch an app, the sys UI looks at it and creates an interface out of it? What if instead, any dev could make a tiny little virtual object for the UI for the OS, and then that virtual object could work with any 2D objects you wanted? You could just take your calendar and put it on your virtual touch screen on your wall so you could see and interact with it. What if you wanted to take that with you? You could just pull on the tab and pull out the application itself and plop it into a new virtual device, and that solves the problem entirely. "),(0,i.kt)("p",null," If you're in a crowded airplane, no problem! Just pull out a panel shell that happens to work well in that situation. You simply take it, drop it on the table, or take the app you want and drop it into the panel shell. It instantly works! In the case of 2D apps, the actual app itself is called a panel. It's equivalent to a window or a fullscreen view on a mobile device. You can then take that panel and put it into a specific Stardust client (Stardust clients create virtual objects). You can put it into a panel shell Stardust client, whose job is to provide a 3D way of interacting with the app and translate it into 2D or another form of 3D, depending on the application. "),(0,i.kt)("p",null,"This effectively means that you can have a digital bracelet panel shell. You can take your favorite watch app or clock app, whether it's a webpage or something similar, and drop it onto your wrist. Now, you can tell the time on your wrist automatically with whatever app you want. If you want to emulate your favorite smartwatch, all you have to do is get a smartwatch emulator and drop it onto your wrist. You can have any smartwatch you want as long as you can run it as software. "),(0,i.kt)("p",null," That's the core idea of Stardust. We aim to separate the user interface from the actual app itself so that you can switch the way you interact with your applications based on your needs. "))}d.isMDXComponent=!0}}]);